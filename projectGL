# 프로젝트 아키텍쳐 구성 지침
## 가이드 기본 원칙
- 오케스트레이터 패턴 적용하여 호출순서는 오케스트레이터에서만 정의
- 유즈케이스 기반 모듈로 구성하되 모듈간의 낮은 의조넝 유지하며 필요한 경우 모듈의 하위 모듈을 구성
- 과도한 추상화는 가독성을 낮추고 복잡성을 증가 시키므로 사용자가 요구 사항이 있지 않으면 개발단계에서는 적용하지 않음
- 단일 클래스의 기능은 줄이고 필요하면 디자인 패턴으로 구현
- 프로젝트 구현과정과 프로덕션 과정을 분리

## 유지보수
- 클라스나 함수가 과도하게 길어지면 분할(함수-파일-패키지)
- 의존성 역전 규칙 적용
- OpenTelemetry Trace로 체인 가시화

## 명명 규칙
- 모듈 내부의 파일/클래/함수는 첨두에 모듈명을 기입
- 함수는 포함된 클래스 명을 모듈네임 이어 붙일 것
- 공개함수는 명확한 prefix 사용, 내부 함수는 _prefix 로 구분
- 데이터 포맷 이름 동일(json, pydantic, databa)
- 키의 값이, 이름인 경우 주의 해서 검토

### 프로덕션 과정
- 프로젝트 계획단계에서는 추상화를 사용하지 않고 프로덕션 계획에서 추상화를 고려
- 공통화가 필요한 경우 infra로 승급
- 베이스 클래스 추출
- 안정 후 repository.py로 일괄 정비
- 2~3곳 이상 중복되면 infra/redis.py 식으로 “승급”하는 YAGNI & 리팩터 주기를 권장
- 성능 모니터링

## 프로젝트 아키텍쳐 구조
- 컴포짓 유즈케이스/도메인 별 패키지/메인모듈 구성
- 아토믹 유즈케이스는 모듈 내의 클래스로 구성
- 공통모듈의 수정이 다른 모듈에 사이드이펙트를 주지 않아야 함

## 인프라
- infra/core : 세션, 연결정보, 초기화, 설정, 도커 등 꼭 필요한 부분만
- 도커, db, 이벤트 서버등 초기화, 설정, 연결 등
- 공통인프라에/코어에는 외부DB 및 전역설정 관리 , 컨테이너 관리(실행, 재시작, 설정) 사용하고 각모듈이 세부 사항을 관리
- repository, cach의 공통 사항은 infra에서 관리
- db, 이벤트등 외부 서비스는 레이지 싱글톤/전역을 이용하여 다른 모듈이 참조해서 사용

## 모듈
- 메인모듈은 비즈니스플로우(오케스트레이터), 데이터 스키마, __init__ , 을 각 메인 모듈에 구성
- 모듈의 각 서비스는 의존성 없이 생성하고 Orchestrator가 의존성 주입담당
- 모듈간의 의존은 최소화 그리고 단방향으로만 유지
- 모듈 간 계약의 실용적 구현 필요
- module : orchestrator.py, 단일기능 파일, repository.py(DB, API), schemak.py(Pydantic 모델), __init__.py 구성
- schema.py를 통한 데이터 계약 활용
- utils 폴더에는 간단한 함수들 정의(파싱, 정제,날짜 등)
- %주의% 모듈간 순환 참조 제거

## 로그, 예외처리
- 단계별 로깅: DEBUG(개발), INFO(비즈니스), WARN(주의), ERROR(에러)
- 설정에서 로그 모델 선택(기본은 debug)

## 문서
- 각 모듈간 readme.md 작성(외부에서 참조해야할 내용 위주, 호출스택, 입출력 데이터, 단순화(예제x, 참조할 건 이름/위치 명시))
- root에 readme.md  및 외부 db나 API에 관한 설명문서
- 클래스 다이어그램 자동생성 도구 사용
### readme.md 작성 요령
- 데이터 파이프라인 구조
- 모듈별 사용 방법 및 예시(간소)
- 모듈 설정 파일 관리
- (존재하는 경우) 이벤트 발행 내용 및 처리 흐름 및 동작방식
-

## Implementation_plan.md 작성 요령
- 전체적인 개략 은 root 폴더에 작성
- 모듈간 호출 및 반환 할때 사용하는 스미마는 root이 schema.py 에 정의 및 데이터 파이프라인 설명/설명
- 데이터 파이프 라인 및 시나리오를 우선적으로 작성
- 각 서브 폴더/모듈의 {module}_imlementation_plan.md 를 작성
- 각 서브 모듈의 데이터 스키마 작성 및 데이터 파이프라인 설명/작성

instruction
- 스키마 변경 시 어느 모듈이 영향 받는지 우선 분석(main 오케스트레이터 참조, readme.md 확인)
- 스키마 변경 시 스키마에 주석으로 기록
